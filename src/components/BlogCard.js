function BlogCard({blog}){

    const {author, categories, content, description, title, thumbnail, link} = blog
    
    return (
        <a href={link} target="_blank" className="blog-link">
            <div className="blog-card">
                <img 
                className="blog-thumbnail"
                src={thumbnail}
                alt="thumbnail"
                />
                <div className="blog-contents">
                    <div className="blog-header">
                        <h3>{title}</h3>
                        <p> by: {author}</p>
                        {/* <p>ADD publish date here</p> */}
                    </div>
                    <div className="blog-description">
                        <p>{description.substring(4, 200)}...</p>
                    </div>
                </div>
            </div>
        </a>
    )
}

export default BlogCard


/*{author: "Matthew Draghi"
categories: (5) ['career-development', 'front-end-web-development', 'flatiron-school', 'second-chances', 'react']
content: "\n<p>As a college student, I would log into Twitter and endlessly scroll through the content that populated my feed. Memes, sports news, and the latest trailers from Hollywood were all I cared about while swiping my thumb up across the screen and occasionally hitting the empty heart. After learning vanilla JavaScript, my mind started to open up a bit more about the anatomy of a website. “Maybe there is an event listener here and a PATCH request there…” It wasn’t until starting my second phase of the Flatiron School software engineering program that I really began to notice how these websites are made.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6C4nSvy2Woe0m7bWEn4BA.png\"><figcaption>return &lt;img src=”react-logo.png” alt=”React Logo” title=”An icon to front-end devs”/&gt;</figcaption></figure><p>Components are the backbone of React. When we were first introduced to this concept it made sense, but knowing how to properly create and implement the different components was the hard part. For me to fully grasp this concept, I thought of a bicycle. I’ve ridden a bike many times, but never really took the time to break down how the bike works. Taking a closer look at the different components of a bike, you have the seat, the handle bars, the wheels, the chain, etc. Alone, these components can be used for other purposes. Together, they function to give us a working bicycle. That is exactly how components work — they are different functioning parts that can be used in different pieces of an application in combination with other parts. Now when looking at a website, I see components such as the header, search bar, or, in the case of Twitter, an individual tweet.</p>\n<p>Running with Twitter as the example web application, interacting with tweets is a key part of the platform. How does your feed populate? Where does your tweet go when you press “Tweet”? What happens when a tweet is favorited? Is your tweet still “in the cloud” when you hit the “Delete”? Communication with the servers are constantly occurring in web apps. GET requests fetch the tweets for a specific user, POST requests will allow a user to add new tweets to their account, PATCH requests help update the properties of an object (user/tweet), and DELETE requests ensure that whatever you want gone from the server is no longer part of a GET. React has helped deepened my knowledge of http requests, and has cemented my knowledge of when to use which type of requests.</p>\n<p>Components and server communication are only two pieces of the React puzzle. Just being aware of these two concepts can help make the web seem more clear. Once someone is able to get a good grasp on React and its core concepts, websites start appearing differently. You can see the moving parts of the bicycle working together in real time. Typing this blog, I can’t help but think of the controlled component being used to accept my input and save it to state, waiting for me to hit the “Publish” button so a submit event can be triggered, adding this blog to the <em>Medium</em> servers. Breaking the web down from a front-end perspective like this is fascinating. Having had the opportunity to cement my knowledge of React has changed how I view websites forever. I cannot wait to see what await when we move to the next gem of a language…</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c159f5322023\" width=\"1\" height=\"1\" alt=\"\">\n"
description: "\n<p>As a college student, I would log into Twitter and endlessly scroll through the content that populated my feed. Memes, sports news, and the latest trailers from Hollywood were all I cared about while swiping my thumb up across the screen and occasionally hitting the empty heart. After learning vanilla JavaScript, my mind started to open up a bit more about the anatomy of a website. “Maybe there is an event listener here and a PATCH request there…” It wasn’t until starting my second phase of the Flatiron School software engineering program that I really began to notice how these websites are made.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6C4nSvy2Woe0m7bWEn4BA.png\"><figcaption>return &lt;img src=”react-logo.png” alt=”React Logo” title=”An icon to front-end devs”/&gt;</figcaption></figure><p>Components are the backbone of React. When we were first introduced to this concept it made sense, but knowing how to properly create and implement the different components was the hard part. For me to fully grasp this concept, I thought of a bicycle. I’ve ridden a bike many times, but never really took the time to break down how the bike works. Taking a closer look at the different components of a bike, you have the seat, the handle bars, the wheels, the chain, etc. Alone, these components can be used for other purposes. Together, they function to give us a working bicycle. That is exactly how components work — they are different functioning parts that can be used in different pieces of an application in combination with other parts. Now when looking at a website, I see components such as the header, search bar, or, in the case of Twitter, an individual tweet.</p>\n<p>Running with Twitter as the example web application, interacting with tweets is a key part of the platform. How does your feed populate? Where does your tweet go when you press “Tweet”? What happens when a tweet is favorited? Is your tweet still “in the cloud” when you hit the “Delete”? Communication with the servers are constantly occurring in web apps. GET requests fetch the tweets for a specific user, POST requests will allow a user to add new tweets to their account, PATCH requests help update the properties of an object (user/tweet), and DELETE requests ensure that whatever you want gone from the server is no longer part of a GET. React has helped deepened my knowledge of http requests, and has cemented my knowledge of when to use which type of requests.</p>\n<p>Components and server communication are only two pieces of the React puzzle. Just being aware of these two concepts can help make the web seem more clear. Once someone is able to get a good grasp on React and its core concepts, websites start appearing differently. You can see the moving parts of the bicycle working together in real time. Typing this blog, I can’t help but think of the controlled component being used to accept my input and save it to state, waiting for me to hit the “Publish” button so a submit event can be triggered, adding this blog to the <em>Medium</em> servers. Breaking the web down from a front-end perspective like this is fascinating. Having had the opportunity to cement my knowledge of React has changed how I view websites forever. I cannot wait to see what await when we move to the next gem of a language…</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c159f5322023\" width=\"1\" height=\"1\" alt=\"\">\n"
enclosure: {}
guid: "https://medium.com/p/c159f5322023"
link: "https://medium.com/@mtd5264/the-unraveled-web-c159f5322023?source=rss-3e52958f6edc------2"
pubDate: "2022-02-17 01:35:25"
thumbnail: "https://cdn-images-1.medium.com/max/1024/1*y6C4nSvy2Woe0m7bWEn4BA.png"
title: "The Unraveled Web"
[[Prototype]]: Object Object*/